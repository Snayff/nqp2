name: Check Codebase
on:
  pull_request:
    types: [ opened, edited, synchronize ]

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository code
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        version: 1.0

    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    #----------------------------------------------
    # install your root project, if required
    #----------------------------------------------
    - name: Install library
      run: poetry install --no-interaction

  test:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Run test suite
      run: |
        source .venv/bin/activate
        pytest tests/

  lint:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Lint Code Base
      uses: github/super-linter@v4
      env:
        # PYTHON_BLACK_CONFIG_FILE: pyproject.toml
        # PYTHON_ISORT_CONFIG_FILE: pyproject.toml
        # PYTHON_MYPY_CONFIG_FILE: mypy.ini
        LINTER_RULES_PATH: /
        VALIDATE_GITHUB_ACTIONS: true
        VALIDATE_YAML: true
        # VALIDATE_JSON: true
        # VALIDATE_PYTHON_BLACK: true
        # VALIDATE_PYTHON_ISORT: true
        # VALIDATE_PYTHON_MYPY: true
        VALIDATE_ALL_CODEBASE: false
        DEFAULT_BRANCH: develop
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  format:
    needs: lint
    runs-on: ubuntu-latest

    steps:
    - name: Swap to venv for black and isort
      run: |
        source .venv/bin/activate

    - name: Test if black and isort should reformat the scripts
      id: black_isort_status
      run: |
        if black --check nqp/ && isort --check-only nqp/; then
          echo "::set-output name=result::false"
        else
          echo "::set-output name=result::true"
        fi

    - name: If needed, commit black/isort changes to the pull request
      if: steps.black_isort_status.outputs.result == 'true'
      run: |
        black "nqp/"
        isort "nqp/"
        git config --global user.name "Snayff"
        git config --global user.email "Snayff@users.noreply.github.com"
        git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY"
        git fetch
        git checkout "$GITHUB_HEAD_REF"
        git commit -am "nqp formatted code with black and isort"
        git push
