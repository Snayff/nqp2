name: Check Codebase
on:
  pull_request:
    types: [ opened, edited, synchronize ]

jobs:

  check_codebase:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository code
      uses: actions/checkout@v2

    - name: Setup Python
      id: setup-python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        version: 1.1.0

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --no-interaction --no-root

    - name: Install library
      run: |
        poetry install --no-interaction

    - name: Set Source
      run: |
        source .venv/bin/activate 

# TODO: uncomment after tests are fixed
#    - name: Run test suite
#      run: |
#        poetry run python -m pytest tests/

    - name: Lint Code Base
      uses: github/super-linter@v4
      env:
        # PYTHON_BLACK_CONFIG_FILE: pyproject.toml
        # PYTHON_ISORT_CONFIG_FILE: pyproject.toml
        # PYTHON_MYPY_CONFIG_FILE: mypy.ini
        LINTER_RULES_PATH: /
        VALIDATE_GITHUB_ACTIONS: true
        VALIDATE_YAML: true
        # VALIDATE_JSON: true
        # VALIDATE_PYTHON_BLACK: true
        # VALIDATE_PYTHON_ISORT: true
        # VALIDATE_PYTHON_MYPY: true
        VALIDATE_ALL_CODEBASE: false
        DEFAULT_BRANCH: develop
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
